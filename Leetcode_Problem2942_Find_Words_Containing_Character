/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findWordsContaining(char** words, int wordsSize, char x, int* returnSize) {
    int *ans = malloc(wordsSize*sizeof(int));
    *returnSize = 0;
    for( int i = 0 ; i < wordsSize ; i++)
    {
        for( int j = 0 ; j < strlen(words[i]) ; j++)
        {
            if(words[i][j] == x)
            {
                ans[(*returnSize)++] = i;
                break;
            }
        }
    }
    return ans;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
static bool String_containsChar(const char * const str, const char ch)
{
	for (int i = 0 ; i < strlen(str) ; i++)
		if (str[i] == ch)
			return 1;
	return 0;
}
int * findWordsContaining(const char * const * const wordArr, const int wordArrLen, const char ch, int * const pRetArrLen){
	int * const retArr = (int *)malloc(sizeof (int) * wordArrLen);
	*pRetArrLen = 0;
	for (int i = 0 ; i < wordArrLen ; i++)
		if (String_containsChar(wordArr[i], ch))
			retArr[(*pRetArrLen)++] = i;
	return retArr;
}
